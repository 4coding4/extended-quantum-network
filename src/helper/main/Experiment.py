import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from numpy import ndarray
from tqdm import tqdm

from src.helper.main.main import run_method_with_nodes
from src.network.StarNetwork import StarNetwork


class Experiment:
    """
    Class to set up and perform experiments on the network.


    Experiment properties
    ---------------------
    num_each_simulation (default 100):
        The number of runs to perform for each step of the simulation

    csv_path (default "./out/data.csv")
        The path of the csv file

    fig_path (default "./out/fidelity-over-length.png")
        The path of the figure generated by the experiment

    """
    _num_each_simulation: int = 100
    _csv_path: str = "../out/data.csv"
    _lengths: ndarray = np.arange(10, 1000 + 10, 10)
    _fig_path: str = "../out/fidelity-over-length.png"

    _network: StarNetwork

    def __init__(self, network: StarNetwork):
        """
        Constructor for the Experiment class.

        :param network: The StarNetwork to experiment on
        """
        self._network = network

    ###########
    # GETTERS #
    ###########

    @property
    def num_each_simulation(self) -> int:
        """
        :type: int
        """
        return self._num_each_simulation

    @property
    def csv_path(self) -> str:
        """
        :type: str
        """
        return self._csv_path

    @property
    def fig_path(self) -> str:
        """
        :type: str
        """
        return self._fig_path

    ###########
    # SETTERS #
    ###########

    @num_each_simulation.setter
    def num_each_simulation(self, value: int):
        """
        Set the number of measurements for each run of the simulation.
        :param value: The number of measurements for each run of the simulation
        :raises AssertionError: If the value is smaller than 0 
        """
        assert (value > 0)
        self._num_each_simulation = value

    @csv_path.setter
    def csv_path(self, filename: str):
        """
        Set the filename for the csv file.

        :param filename: The name of the file
        :raises AssertionError: If the filename does not contain the .csv extension
        """
        assert (".csv" in filename)
        self._csv_path = filename

    @fig_path.setter
    def fig_path(self, filename: str):
        """
        Set the filename for the png file.

        :param filename: The name of the file
        :raises AssertionError: If the filename does not contain the .png extension
        """
        assert (".png" in filename)
        self._fig_path = filename

    ############################################
    # FUNCTIONS USED TO PERFORM THE EXPERIMENT #
    ############################################

    def run(self, method: callable, nodes: list, debug: bool = False):
        """
        Run the simulation between the two given nodes. When the simulation is over, a
        csv file is created with the results and a figure is generated.

        :param method: The method to run on the network
        :param nodes: The nodes to run the method on
        :param debug: If the simulation should print more info
        """
        f = open(self._csv_path, "w+")
        f.write("length,fidelity\r\n")

        for length in tqdm(self._lengths):
            fidelity_values = []
            self._network.channels_length = length

            if debug:
                print(f"Nodes are entangled after {self._network.channels_length * 1000} meters")

            for _ in range(self._num_each_simulation):
                self.run_one_simulation(method, nodes, fidelity_values, debug)

            avg_fidelity = np.mean(fidelity_values)
            if debug:
                print(f"Average fidelity: {avg_fidelity}")
                print(f"Not decohered qubits: {(avg_fidelity > 0.5).sum()}/{len(fidelity_values)}")

            f.write(f"{length},{avg_fidelity}\r\n")

        f.close()
        self._plot_results()

    def run_one_simulation(self, method: callable, nodes: list, fidelity_values: list, debug: bool = False):
        """
        Run a single simulation.
        """
        try:
            result = run_method_with_nodes(method, nodes, debug)
            # is array
            for idx in range(len(result)):
                fidelity_values.append(result[idx]["fidelity"])
        except KeyError:
            fidelity_values.append(0)
            if debug:
                print("Either one or both Qubits were lost during transfer")

    def _plot_results(self):
        dataframe = pd.read_csv(self._csv_path)
        a, b = np.polyfit(dataframe["length"], dataframe["fidelity"], 1)

        fig = plt.figure(figsize=(20, 10))
        plt.title("Fidelity of entanglement over distance")
        plt.plot(dataframe["length"], dataframe["fidelity"], 'o')
        plt.plot(dataframe["length"], a * dataframe["length"] + b)
        plt.xlabel("Length of quantum channel (m)")
        plt.ylabel("Fidelity")
        plt.xscale("linear")
        plt.yscale("linear")
        plt.show()

        fig.savefig(self._fig_path)
